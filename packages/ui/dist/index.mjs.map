{"version":3,"sources":["../src/lib/utils.ts","../src/components/button.tsx","../src/components/card.tsx","../src/components/input.tsx","../src/components/label.tsx","../src/components/separator.tsx","../src/components/toast.tsx","../src/components/tooltip.tsx","../src/components/auth-form.tsx","../src/components/protected-route.tsx","../src/components/user-menu.tsx","../src/components/onboarding-step.tsx","../src/components/site-form.tsx","../src/components/domain-form.tsx","../src/components/onboarding-progress.tsx","../src/components/plan-badge.tsx","../src/components/usage-bar.tsx","../src/components/website-card.tsx","../src/components/domain-card.tsx","../src/components/upgrade-cta.tsx","../src/components/pricing-card.tsx","../src/components/billing-info.tsx","../src/components/invoice-list.tsx","../src/components/feature-gate.tsx","../src/components/entitlement-card.tsx"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"../lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","import * as React from \"react\"\nimport { cn } from \"../lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","import * as React from \"react\"\nimport { cn } from \"../lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"../lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\nimport { cn } from \"../lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"../lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport { cn } from \"../lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","import * as React from \"react\"\nimport { useState } from \"react\"\nimport { Button } from \"./button\"\nimport { Input } from \"./input\"\nimport { Label } from \"./label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { Separator } from \"./separator\"\nimport { cn } from \"../lib/utils\"\n\nexport interface AuthFormProps {\n  mode: 'signin' | 'signup' | 'reset'\n  onSubmit: (data: AuthFormData) => Promise<{ error: any }>\n  onGoogleSignIn?: () => Promise<{ error: any }>\n  onModeChange: (mode: 'signin' | 'signup' | 'reset') => void\n  loading?: boolean\n  className?: string\n}\n\nexport interface AuthFormData {\n  email: string\n  password: string\n  name?: string\n}\n\nexport function AuthForm({\n  mode,\n  onSubmit,\n  onGoogleSignIn,\n  onModeChange,\n  loading = false,\n  className\n}: AuthFormProps) {\n  const [formData, setFormData] = useState<AuthFormData>({\n    email: '',\n    password: '',\n    name: ''\n  })\n  const [error, setError] = useState<string | null>(null)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setIsSubmitting(true)\n\n    try {\n      const { error } = await onSubmit(formData)\n      if (error) {\n        setError(error.message || 'An error occurred')\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleGoogleSignIn = async () => {\n    if (!onGoogleSignIn) return\n    \n    setError(null)\n    setIsSubmitting(true)\n\n    try {\n      const { error } = await onGoogleSignIn()\n      if (error) {\n        setError(error.message || 'An error occurred')\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleInputChange = (field: keyof AuthFormData) => (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: e.target.value\n    }))\n  }\n\n  const getTitle = () => {\n    switch (mode) {\n      case 'signin': return 'Sign In'\n      case 'signup': return 'Sign Up'\n      case 'reset': return 'Reset Password'\n      default: return 'Sign In'\n    }\n  }\n\n  const getDescription = () => {\n    switch (mode) {\n      case 'signin': return 'Enter your credentials to access your account'\n      case 'signup': return 'Create a new account to get started'\n      case 'reset': return 'Enter your email to reset your password'\n      default: return 'Enter your credentials to access your account'\n    }\n  }\n\n  const getSubmitText = () => {\n    switch (mode) {\n      case 'signin': return 'Sign In'\n      case 'signup': return 'Create Account'\n      case 'reset': return 'Send Reset Email'\n      default: return 'Sign In'\n    }\n  }\n\n  return (\n    <Card className={cn(\"w-full max-w-md mx-auto\", className)}>\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl text-center\">{getTitle()}</CardTitle>\n        <CardDescription className=\"text-center\">\n          {getDescription()}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {mode === 'signup' && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"Enter your name\"\n                value={formData.name}\n                onChange={handleInputChange('name')}\n                required\n                disabled={isSubmitting || loading}\n              />\n            </div>\n          )}\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={formData.email}\n              onChange={handleInputChange('email')}\n              required\n              disabled={isSubmitting || loading}\n            />\n          </div>\n\n          {mode !== 'reset' && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={formData.password}\n                onChange={handleInputChange('password')}\n                required\n                disabled={isSubmitting || loading}\n              />\n            </div>\n          )}\n\n          {error && (\n            <div className=\"text-sm text-red-600 bg-red-50 p-3 rounded-md\">\n              {error}\n            </div>\n          )}\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={isSubmitting || loading}\n          >\n            {isSubmitting ? 'Please wait...' : getSubmitText()}\n          </Button>\n        </form>\n\n        {mode !== 'reset' && onGoogleSignIn && (\n          <>\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">\n                  Or continue with\n                </span>\n              </div>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={handleGoogleSignIn}\n              disabled={isSubmitting || loading}\n            >\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  fill=\"#4285F4\"\n                />\n                <path\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  fill=\"#34A853\"\n                />\n                <path\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  fill=\"#FBBC05\"\n                />\n                <path\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  fill=\"#EA4335\"\n                />\n              </svg>\n              Continue with Google\n            </Button>\n          </>\n        )}\n\n        <div className=\"text-center text-sm\">\n          {mode === 'signin' && (\n            <>\n              Don't have an account?{' '}\n              <button\n                type=\"button\"\n                className=\"text-primary hover:underline\"\n                onClick={() => onModeChange('signup')}\n              >\n                Sign up\n              </button>\n              {' • '}\n              <button\n                type=\"button\"\n                className=\"text-primary hover:underline\"\n                onClick={() => onModeChange('reset')}\n              >\n                Forgot password?\n              </button>\n            </>\n          )}\n          {mode === 'signup' && (\n            <>\n              Already have an account?{' '}\n              <button\n                type=\"button\"\n                className=\"text-primary hover:underline\"\n                onClick={() => onModeChange('signin')}\n              >\n                Sign in\n              </button>\n            </>\n          )}\n          {mode === 'reset' && (\n            <>\n              Remember your password?{' '}\n              <button\n                type=\"button\"\n                className=\"text-primary hover:underline\"\n                onClick={() => onModeChange('signin')}\n              >\n                Sign in\n              </button>\n            </>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { Button } from \"./button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\n\nexport interface ProtectedRouteProps {\n  children: React.ReactNode\n  fallback?: React.ReactNode\n  requireAuth?: boolean\n  className?: string\n  user?: any\n  loading?: boolean\n}\n\nexport function ProtectedRoute({\n  children,\n  fallback,\n  requireAuth = true,\n  className,\n  user,\n  loading = false\n}: ProtectedRouteProps) {\n\n  if (loading) {\n    return (\n      <div className={`flex items-center justify-center min-h-screen ${className || ''}`}>\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (requireAuth && !user) {\n    if (fallback) {\n      return <>{fallback}</>\n    }\n\n    return (\n      <div className={`flex items-center justify-center min-h-screen p-4 ${className || ''}`}>\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle>Authentication Required</CardTitle>\n            <CardDescription>\n              You need to be signed in to access this page.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button \n              className=\"w-full\"\n              onClick={() => window.location.href = '/auth/signin'}\n            >\n              Sign In\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={() => window.location.href = '/auth/signup'}\n            >\n              Sign Up\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (!requireAuth && user) {\n    // User is authenticated but this route doesn't require auth\n    // Redirect to dashboard or show appropriate content\n    return <>{children}</>\n  }\n\n  return <>{children}</>\n}\n","import * as React from \"react\"\nimport { useState } from \"react\"\nimport { Button } from \"./button\"\nimport { Card, CardContent } from \"./card\"\nimport { Separator } from \"./separator\"\nimport { cn } from \"../lib/utils\"\n\nexport interface UserMenuProps {\n  user: {\n    id: string\n    email?: string\n    name?: string\n    avatar_url?: string\n  }\n  onSignOut: () => void\n  onProfileClick?: () => void\n  onSettingsClick?: () => void\n  className?: string\n}\n\nexport function UserMenu({\n  user,\n  onSignOut,\n  onProfileClick,\n  onSettingsClick,\n  className\n}: UserMenuProps) {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const handleProfileClick = () => {\n    setIsOpen(false)\n    onProfileClick?.()\n  }\n\n  const handleSettingsClick = () => {\n    setIsOpen(false)\n    onSettingsClick?.()\n  }\n\n  const handleSignOut = () => {\n    setIsOpen(false)\n    onSignOut()\n  }\n\n  const getUserInitials = () => {\n    if (user.name) {\n      return user.name\n        .split(' ')\n        .map(n => n[0])\n        .join('')\n        .toUpperCase()\n        .slice(0, 2)\n    }\n    if (user.email) {\n      return user.email[0].toUpperCase()\n    }\n    return 'U'\n  }\n\n  const getUserDisplayName = () => {\n    return user.name || user.email || 'User'\n  }\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      <Button\n        variant=\"ghost\"\n        className=\"relative h-8 w-8 rounded-full\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        {user.avatar_url ? (\n          <img\n            src={user.avatar_url}\n            alt={getUserDisplayName()}\n            className=\"h-8 w-8 rounded-full object-cover\"\n          />\n        ) : (\n          <div className=\"h-8 w-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium\">\n            {getUserInitials()}\n          </div>\n        )}\n      </Button>\n\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <div\n            className=\"fixed inset-0 z-10\"\n            onClick={() => setIsOpen(false)}\n          />\n          \n          {/* Menu */}\n          <Card className=\"absolute right-0 top-10 z-20 w-56\">\n            <CardContent className=\"p-2\">\n              <div className=\"px-3 py-2\">\n                <p className=\"text-sm font-medium\">{getUserDisplayName()}</p>\n                {user.email && (\n                  <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                )}\n              </div>\n              \n              <Separator className=\"my-2\" />\n              \n              <div className=\"space-y-1\">\n                {onProfileClick && (\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-sm\"\n                    onClick={handleProfileClick}\n                  >\n                    Profile\n                  </Button>\n                )}\n                \n                {onSettingsClick && (\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-sm\"\n                    onClick={handleSettingsClick}\n                  >\n                    Settings\n                  </Button>\n                )}\n                \n                <Separator className=\"my-2\" />\n                \n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start text-sm text-red-600 hover:text-red-600 hover:bg-red-50\"\n                  onClick={handleSignOut}\n                >\n                  Sign Out\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport { cn } from \"../lib/utils\"\n\nexport interface OnboardingStepProps {\n  step: number\n  totalSteps: number\n  title: string\n  description?: string\n  children: React.ReactNode\n  isCompleted?: boolean\n  isActive?: boolean\n  className?: string\n}\n\nexport function OnboardingStep({\n  step,\n  totalSteps,\n  title,\n  description,\n  children,\n  isCompleted = false,\n  isActive = false,\n  className\n}: OnboardingStepProps) {\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Step Header */}\n      <div className=\"flex items-center space-x-4\">\n        <div className={cn(\n          \"flex h-10 w-10 items-center justify-center rounded-full border-2 text-sm font-medium\",\n          isCompleted \n            ? \"border-green-500 bg-green-500 text-white\" \n            : isActive \n            ? \"border-blue-500 bg-blue-500 text-white\"\n            : \"border-gray-300 bg-white text-gray-500\"\n        )}>\n          {isCompleted ? (\n            <svg className=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n            </svg>\n          ) : (\n            step\n          )}\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n          {description && (\n            <p className=\"text-sm text-gray-500\">{description}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Step Content */}\n      {isActive && (\n        <div className=\"ml-14\">\n          {children}\n        </div>\n      )}\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport { useState } from \"react\"\nimport { Button } from \"./button\"\nimport { Input } from \"./input\"\nimport { Label } from \"./label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { cn } from \"../lib/utils\"\n\nexport interface SiteFormData {\n  name: string\n  subdomain: string\n  template: string\n  description?: string\n}\n\nexport interface SiteFormProps {\n  onSubmit: (data: SiteFormData) => Promise<{ error?: string }>\n  loading?: boolean\n  className?: string\n}\n\nconst TEMPLATES = [\n  { id: 'business', name: 'Business', description: 'Professional business website' },\n  { id: 'portfolio', name: 'Portfolio', description: 'Creative portfolio showcase' },\n  { id: 'blog', name: 'Blog', description: 'Content-focused blog site' },\n  { id: 'ecommerce', name: 'E-commerce', description: 'Online store with shopping cart' },\n  { id: 'restaurant', name: 'Restaurant', description: 'Restaurant with menu and reservations' },\n  { id: 'agency', name: 'Agency', description: 'Marketing agency website' },\n]\n\nexport function SiteForm({ onSubmit, loading = false, className }: SiteFormProps) {\n  const [formData, setFormData] = useState<SiteFormData>({\n    name: '',\n    subdomain: '',\n    template: 'business',\n    description: ''\n  })\n  const [error, setError] = useState<string | null>(null)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setIsSubmitting(true)\n\n    try {\n      const { error } = await onSubmit(formData)\n      if (error) {\n        setError(error)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleInputChange = (field: keyof SiteFormData) => (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\n  ) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: e.target.value\n    }))\n  }\n\n  const generateSubdomain = () => {\n    const subdomain = formData.name\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, '-')\n      .replace(/-+/g, '-')\n      .replace(/^-|-$/g, '')\n    setFormData(prev => ({ ...prev, subdomain }))\n  }\n\n  return (\n    <Card className={cn(\"w-full max-w-2xl mx-auto\", className)}>\n      <CardHeader>\n        <CardTitle>Create Your Website</CardTitle>\n        <CardDescription>\n          Let's set up your new WordPress website. Choose a name, subdomain, and template.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Website Name *</Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"My Awesome Website\"\n                value={formData.name}\n                onChange={handleInputChange('name')}\n                required\n                disabled={isSubmitting || loading}\n              />\n              <p className=\"text-xs text-gray-500\">\n                This will be the title of your website\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"subdomain\">Subdomain *</Label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  id=\"subdomain\"\n                  type=\"text\"\n                  placeholder=\"my-awesome-website\"\n                  value={formData.subdomain}\n                  onChange={handleInputChange('subdomain')}\n                  required\n                  disabled={isSubmitting || loading}\n                  className=\"flex-1\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={generateSubdomain}\n                  disabled={isSubmitting || loading || !formData.name}\n                >\n                  Generate\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                Your site will be available at: {formData.subdomain ? `${formData.subdomain}.naveeg.com` : 'subdomain.naveeg.com'}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"template\">Template *</Label>\n            <select\n              id=\"template\"\n              value={formData.template}\n              onChange={handleInputChange('template')}\n              disabled={isSubmitting || loading}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              {TEMPLATES.map((template) => (\n                <option key={template.id} value={template.id}>\n                  {template.name} - {template.description}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description (Optional)</Label>\n            <textarea\n              id=\"description\"\n              placeholder=\"Brief description of your website...\"\n              value={formData.description}\n              onChange={handleInputChange('description')}\n              disabled={isSubmitting || loading}\n              rows={3}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          {error && (\n            <div className=\"text-sm text-red-600 bg-red-50 p-3 rounded-md\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"flex justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting || loading || !formData.name || !formData.subdomain}\n            >\n              {isSubmitting ? 'Creating Website...' : 'Create Website'}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { useState } from \"react\"\nimport { Button } from \"./button\"\nimport { Input } from \"./input\"\nimport { Label } from \"./label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { cn } from \"../lib/utils\"\n\nexport interface DomainFormData {\n  domain: string\n}\n\nexport interface DomainFormProps {\n  siteUrl: string\n  onSubmit: (data: DomainFormData) => Promise<{ error?: string }>\n  onSkip: () => void\n  loading?: boolean\n  className?: string\n}\n\nexport function DomainForm({ \n  siteUrl, \n  onSubmit, \n  onSkip, \n  loading = false, \n  className \n}: DomainFormProps) {\n  const [formData, setFormData] = useState<DomainFormData>({\n    domain: ''\n  })\n  const [error, setError] = useState<string | null>(null)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setIsSubmitting(true)\n\n    try {\n      const { error } = await onSubmit(formData)\n      if (error) {\n        setError(error)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      domain: e.target.value\n    }))\n  }\n\n  const isValidDomain = (domain: string) => {\n    const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/\n    return domainRegex.test(domain)\n  }\n\n  return (\n    <Card className={cn(\"w-full max-w-2xl mx-auto\", className)}>\n      <CardHeader>\n        <CardTitle>Connect Custom Domain</CardTitle>\n        <CardDescription>\n          Add your own domain to your website. You can skip this step and do it later.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Current Site Info */}\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-medium text-blue-900\">Your Website</h4>\n            <p className=\"text-sm text-blue-700 mt-1\">\n              Currently available at: <span className=\"font-mono\">{siteUrl}</span>\n            </p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"domain\">Custom Domain</Label>\n              <Input\n                id=\"domain\"\n                type=\"text\"\n                placeholder=\"example.com\"\n                value={formData.domain}\n                onChange={handleInputChange}\n                disabled={isSubmitting || loading}\n                className={cn(\n                  formData.domain && !isValidDomain(formData.domain) && \"border-red-300\"\n                )}\n              />\n              <p className=\"text-xs text-gray-500\">\n                Enter your domain without www (e.g., example.com)\n              </p>\n              {formData.domain && !isValidDomain(formData.domain) && (\n                <p className=\"text-xs text-red-600\">\n                  Please enter a valid domain name\n                </p>\n              )}\n            </div>\n\n            {error && (\n              <div className=\"text-sm text-red-600 bg-red-50 p-3 rounded-md\">\n                {error}\n              </div>\n            )}\n\n            <div className=\"flex justify-between\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onSkip}\n                disabled={isSubmitting || loading}\n              >\n                Skip for Now\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || loading || !formData.domain || !isValidDomain(formData.domain)}\n              >\n                {isSubmitting ? 'Connecting Domain...' : 'Connect Domain'}\n              </Button>\n            </div>\n          </form>\n\n          {/* Domain Setup Instructions */}\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">Domain Setup Instructions</h4>\n            <div className=\"text-sm text-gray-600 space-y-2\">\n              <p>To connect your domain, you'll need to update your DNS settings:</p>\n              <ol className=\"list-decimal list-inside space-y-1 ml-4\">\n                <li>Add a CNAME record pointing to <code className=\"bg-gray-200 px-1 rounded\">naveeg.com</code></li>\n                <li>Or add an A record pointing to our IP address</li>\n                <li>Wait for DNS propagation (usually 5-30 minutes)</li>\n              </ol>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Need help? Contact our support team for assistance.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { cn } from \"../lib/utils\"\n\nexport interface OnboardingProgressProps {\n  currentStep: number\n  totalSteps: number\n  steps: {\n    id: string\n    title: string\n    completed: boolean\n  }[]\n  className?: string\n}\n\nexport function OnboardingProgress({\n  currentStep,\n  totalSteps,\n  steps,\n  className\n}: OnboardingProgressProps) {\n  const progress = (currentStep / totalSteps) * 100\n\n  return (\n    <div className={cn(\"w-full\", className)}>\n      {/* Progress Bar */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n          <span>Step {currentStep} of {totalSteps}</span>\n          <span>{Math.round(progress)}% Complete</span>\n        </div>\n        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n          <div\n            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300 ease-in-out\"\n            style={{ width: `${progress}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Step List */}\n      <div className=\"space-y-3\">\n        {steps.map((step, index) => (\n          <div\n            key={step.id}\n            className={cn(\n              \"flex items-center space-x-3 text-sm\",\n              index < currentStep ? \"text-green-600\" : \n              index === currentStep - 1 ? \"text-blue-600\" : \n              \"text-gray-400\"\n            )}\n          >\n            <div className={cn(\n              \"flex h-6 w-6 items-center justify-center rounded-full border-2 text-xs font-medium\",\n              step.completed \n                ? \"border-green-500 bg-green-500 text-white\" \n                : index === currentStep - 1\n                ? \"border-blue-500 bg-blue-500 text-white\"\n                : \"border-gray-300 bg-white text-gray-400\"\n            )}>\n              {step.completed ? (\n                <svg className=\"h-3 w-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n              ) : (\n                index + 1\n              )}\n            </div>\n            <span className={cn(\n              \"font-medium\",\n              step.completed ? \"text-green-600\" : \n              index === currentStep - 1 ? \"text-blue-600\" : \n              \"text-gray-400\"\n            )}>\n              {step.title}\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport { cn } from \"../lib/utils\"\n\nexport interface PlanBadgeProps {\n  plan: {\n    id: string\n    name: string\n    is_popular?: boolean\n    is_enterprise?: boolean\n  }\n  className?: string\n}\n\nexport function PlanBadge({ plan, className }: PlanBadgeProps) {\n  const getBadgeVariant = () => {\n    if (plan.is_enterprise) return \"enterprise\"\n    if (plan.is_popular) return \"popular\"\n    if (plan.id === \"trial\") return \"trial\"\n    return \"default\"\n  }\n\n  const variant = getBadgeVariant()\n\n  const getBadgeStyles = () => {\n    switch (variant) {\n      case \"enterprise\":\n        return \"bg-gradient-to-r from-purple-500 to-purple-600 text-white border-purple-500\"\n      case \"popular\":\n        return \"bg-gradient-to-r from-blue-500 to-blue-600 text-white border-blue-500\"\n      case \"trial\":\n        return \"bg-gray-100 text-gray-700 border-gray-300\"\n      default:\n        return \"bg-gray-100 text-gray-700 border-gray-300\"\n    }\n  }\n\n  const getBadgeText = () => {\n    switch (variant) {\n      case \"enterprise\":\n        return \"Enterprise\"\n      case \"popular\":\n        return \"Most Popular\"\n      case \"trial\":\n        return \"Trial\"\n      default:\n        return plan.name\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border\",\n        getBadgeStyles(),\n        className\n      )}\n    >\n      {variant === \"popular\" && (\n        <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n        </svg>\n      )}\n      {getBadgeText()}\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport { cn } from \"../lib/utils\"\n\nexport interface UsageBarProps {\n  label: string\n  used: number\n  limit: number\n  unit?: string\n  className?: string\n}\n\nexport function UsageBar({ label, used, limit, unit = \"\", className }: UsageBarProps) {\n  const percentage = limit === -1 ? 0 : Math.min((used / limit) * 100, 100)\n  const isUnlimited = limit === -1\n  const isNearLimit = percentage > 80\n  const isOverLimit = used > limit && limit !== -1\n\n  const getBarColor = () => {\n    if (isOverLimit) return \"bg-red-500\"\n    if (isNearLimit) return \"bg-yellow-500\"\n    return \"bg-blue-500\"\n  }\n\n  const formatValue = (value: number) => {\n    if (value >= 1000) {\n      return `${(value / 1000).toFixed(1)}K`\n    }\n    return value.toString()\n  }\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      <div className=\"flex justify-between text-sm\">\n        <span className=\"text-gray-600\">{label}</span>\n        <span className={cn(\n          \"font-medium\",\n          isOverLimit ? \"text-red-600\" : isNearLimit ? \"text-yellow-600\" : \"text-gray-900\"\n        )}>\n          {isUnlimited ? (\n            `${formatValue(used)}${unit}`\n          ) : (\n            `${formatValue(used)}${unit} / ${formatValue(limit)}${unit}`\n          )}\n        </span>\n      </div>\n      \n      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n        <div\n          className={cn(\n            \"h-2 rounded-full transition-all duration-300\",\n            getBarColor()\n          )}\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n      \n      {isUnlimited && (\n        <p className=\"text-xs text-gray-500\">Unlimited</p>\n      )}\n      \n      {isOverLimit && (\n        <p className=\"text-xs text-red-600\">\n          Over limit! Please upgrade your plan.\n        </p>\n      )}\n      \n      {isNearLimit && !isOverLimit && (\n        <p className=\"text-xs text-yellow-600\">\n          Approaching limit. Consider upgrading.\n        </p>\n      )}\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { Button } from \"./button\"\nimport { cn } from \"../lib/utils\"\n\nexport interface WebsiteCardProps {\n  website: {\n    id: string\n    name: string\n    url: string\n    status: 'active' | 'inactive' | 'pending' | 'suspended'\n    template: string\n    last_deployed_at?: string\n  }\n  onEdit?: () => void\n  onView?: () => void\n  onDelete?: () => void\n  className?: string\n}\n\nexport function WebsiteCard({ \n  website, \n  onEdit, \n  onView, \n  onDelete, \n  className \n}: WebsiteCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800'\n      case 'inactive':\n        return 'bg-gray-100 text-gray-800'\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'suspended':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active':\n        return (\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n          </svg>\n        )\n      case 'pending':\n        return (\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n          </svg>\n        )\n      case 'suspended':\n        return (\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z\" clipRule=\"evenodd\" />\n          </svg>\n        )\n      default:\n        return (\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n        )\n    }\n  }\n\n  const formatLastDeployed = (dateString?: string) => {\n    if (!dateString) return 'Never deployed'\n    \n    const date = new Date(dateString)\n    const now = new Date()\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60))\n    \n    if (diffInHours < 1) return 'Just now'\n    if (diffInHours < 24) return `${diffInHours}h ago`\n    if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`\n    return date.toLocaleDateString()\n  }\n\n  return (\n    <Card className={cn(\"hover:shadow-md transition-shadow\", className)}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1\">\n            <CardTitle className=\"text-lg\">{website.name}</CardTitle>\n            <CardDescription className=\"flex items-center space-x-2\">\n              <a\n                href={website.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:text-blue-800 hover:underline\"\n              >\n                {website.url}\n              </a>\n            </CardDescription>\n          </div>\n          <div className={cn(\n            \"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\",\n            getStatusColor(website.status)\n          )}>\n            {getStatusIcon(website.status)}\n            <span className=\"ml-1 capitalize\">{website.status}</span>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Template</span>\n            <span className=\"font-medium capitalize\">{website.template}</span>\n          </div>\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Last Deployed</span>\n            <span className=\"font-medium\">{formatLastDeployed(website.last_deployed_at)}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          {onView && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onView}\n              className=\"flex-1\"\n            >\n              View Site\n            </Button>\n          )}\n          {onEdit && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onEdit}\n              className=\"flex-1\"\n            >\n              Edit\n            </Button>\n          )}\n          {onDelete && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onDelete}\n              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n            >\n              Delete\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { Button } from \"./button\"\nimport { cn } from \"../lib/utils\"\n\nexport interface DomainCardProps {\n  domain: {\n    id: string\n    domain: string\n    status: 'active' | 'inactive' | 'pending' | 'failed'\n    ssl_enabled: boolean\n    website: {\n      id: string\n      name: string\n      url: string\n    }\n  }\n  onEdit?: () => void\n  onView?: () => void\n  onDelete?: () => void\n  className?: string\n}\n\nexport function DomainCard({ \n  domain, \n  onEdit, \n  onView, \n  onDelete, \n  className \n}: DomainCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800'\n      case 'inactive':\n        return 'bg-gray-100 text-gray-800'\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'failed':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active':\n        return (\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n          </svg>\n        )\n      case 'pending':\n        return (\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n          </svg>\n        )\n      case 'failed':\n        return (\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z\" clipRule=\"evenodd\" />\n          </svg>\n        )\n      default:\n        return (\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n        )\n    }\n  }\n\n  return (\n    <Card className={cn(\"hover:shadow-md transition-shadow\", className)}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1\">\n            <CardTitle className=\"text-lg\">{domain.domain}</CardTitle>\n            <CardDescription>\n              Connected to <span className=\"font-medium\">{domain.website.name}</span>\n            </CardDescription>\n          </div>\n          <div className={cn(\n            \"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\",\n            getStatusColor(domain.status)\n          )}>\n            {getStatusIcon(domain.status)}\n            <span className=\"ml-1 capitalize\">{domain.status}</span>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Website</span>\n            <a\n              href={domain.website.url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"font-medium text-blue-600 hover:text-blue-800 hover:underline\"\n            >\n              {domain.website.url}\n            </a>\n          </div>\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">SSL Certificate</span>\n            <div className=\"flex items-center space-x-1\">\n              {domain.ssl_enabled ? (\n                <>\n                  <svg className=\"w-4 h-4 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-green-600 font-medium\">Enabled</span>\n                </>\n              ) : (\n                <>\n                  <svg className=\"w-4 h-4 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span className=\"text-gray-500\">Disabled</span>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          {onView && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onView}\n              className=\"flex-1\"\n            >\n              View Site\n            </Button>\n          )}\n          {onEdit && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onEdit}\n              className=\"flex-1\"\n            >\n              Edit\n            </Button>\n          )}\n          {onDelete && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onDelete}\n              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n            >\n              Delete\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { Button } from \"./button\"\nimport { cn } from \"../lib/utils\"\n\nexport interface UpgradeCTAProps {\n  currentPlan: {\n    id: string\n    name: string\n  }\n  suggestedPlan: {\n    id: string\n    name: string\n    price: number\n    interval: string\n    features: string[]\n  }\n  onUpgrade: () => void\n  reason?: string\n  className?: string\n}\n\nexport function UpgradeCTA({ \n  currentPlan, \n  suggestedPlan, \n  onUpgrade, \n  reason,\n  className \n}: UpgradeCTAProps) {\n  const formatPrice = (price: number, interval: string) => {\n    if (price === 0) return 'Free'\n    return `$${price}/${interval}`\n  }\n\n  return (\n    <Card className={cn(\"border-blue-200 bg-blue-50\", className)}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1\">\n            <CardTitle className=\"text-lg text-blue-900\">\n              Upgrade to {suggestedPlan.name}\n            </CardTitle>\n            <CardDescription className=\"text-blue-700\">\n              {reason || `You're currently on the ${currentPlan.name} plan.`}\n            </CardDescription>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-2xl font-bold text-blue-900\">\n              {formatPrice(suggestedPlan.price, suggestedPlan.interval)}\n            </div>\n            <div className=\"text-sm text-blue-600\">\n              per {suggestedPlan.interval}\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-blue-900\">What you'll get:</h4>\n          <ul className=\"space-y-1\">\n            {suggestedPlan.features.slice(0, 3).map((feature, index) => (\n              <li key={index} className=\"flex items-center text-sm text-blue-700\">\n                <svg className=\"w-4 h-4 mr-2 text-blue-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n                {feature}\n              </li>\n            ))}\n            {suggestedPlan.features.length > 3 && (\n              <li className=\"text-sm text-blue-600\">\n                +{suggestedPlan.features.length - 3} more features\n              </li>\n            )}\n          </ul>\n        </div>\n        \n        <Button\n          onClick={onUpgrade}\n          className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n        >\n          Upgrade Now\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport interface UsageUpgradeCTAProps {\n  feature: string\n  currentUsage: number\n  limit: number\n  suggestedPlan: {\n    id: string\n    name: string\n    price: number\n    interval: string\n  }\n  onUpgrade: () => void\n  className?: string\n}\n\nexport function UsageUpgradeCTA({ \n  feature, \n  currentUsage, \n  limit, \n  suggestedPlan, \n  onUpgrade, \n  className \n}: UsageUpgradeCTAProps) {\n  const percentage = (currentUsage / limit) * 100\n  const isOverLimit = currentUsage > limit\n\n  return (\n    <Card className={cn(\"border-yellow-200 bg-yellow-50\", className)}>\n      <CardContent className=\"pt-6\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"w-6 h-6 text-yellow-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"text-sm font-medium text-yellow-800\">\n              {isOverLimit ? 'Limit Exceeded' : 'Approaching Limit'}\n            </h3>\n            <p className=\"text-sm text-yellow-700 mt-1\">\n              You've used {currentUsage} of {limit} {feature}\n              {isOverLimit ? '. Please upgrade to continue.' : '. Consider upgrading soon.'}\n            </p>\n            <div className=\"mt-3 flex space-x-3\">\n              <Button\n                size=\"sm\"\n                onClick={onUpgrade}\n                className=\"bg-yellow-600 hover:bg-yellow-700 text-white\"\n              >\n                Upgrade to {suggestedPlan.name}\n              </Button>\n              <div className=\"text-sm text-yellow-600 flex items-center\">\n                ${suggestedPlan.price}/{suggestedPlan.interval}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { Button } from \"./button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { cn } from \"../lib/utils\"\n\nexport interface PricingCardProps {\n  plan: {\n    id: string\n    name: string\n    description: string\n    price: number\n    interval: string\n    features: string[]\n    is_popular?: boolean\n    is_enterprise?: boolean\n  }\n  currentPlanId?: string\n  onSelect: (planId: string) => void\n  loading?: boolean\n  className?: string\n}\n\nexport function PricingCard({ \n  plan, \n  currentPlanId, \n  onSelect, \n  loading = false, \n  className \n}: PricingCardProps) {\n  const isCurrentPlan = currentPlanId === plan.id\n  const isPopular = plan.is_popular\n  const isEnterprise = plan.is_enterprise\n\n  const formatPrice = (price: number, interval: string) => {\n    if (price === 0) return 'Free'\n    return `$${price}/${interval}`\n  }\n\n  return (\n    <Card className={cn(\n      \"relative w-full\",\n      isPopular && \"border-blue-500 shadow-lg\",\n      isEnterprise && \"border-purple-500 shadow-lg\",\n      className\n    )}>\n      {isPopular && (\n        <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n          <div className=\"bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium\">\n            Most Popular\n          </div>\n        </div>\n      )}\n      \n      {isEnterprise && (\n        <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n          <div className=\"bg-purple-500 text-white px-3 py-1 rounded-full text-sm font-medium\">\n            Enterprise\n          </div>\n        </div>\n      )}\n\n      <CardHeader className=\"text-center pb-4\">\n        <CardTitle className=\"text-2xl font-bold\">{plan.name}</CardTitle>\n        <CardDescription className=\"text-lg\">{plan.description}</CardDescription>\n        <div className=\"mt-4\">\n          <span className=\"text-4xl font-bold\">{formatPrice(plan.price, plan.interval)}</span>\n          {plan.price > 0 && (\n            <span className=\"text-gray-500 ml-2\">per {plan.interval}</span>\n          )}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        <ul className=\"space-y-3\">\n          {plan.features.map((feature, index) => (\n            <li key={index} className=\"flex items-start space-x-3\">\n              <svg\n                className=\"w-5 h-5 text-green-500 mt-0.5 flex-shrink-0\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n              <span className=\"text-gray-700\">{feature}</span>\n            </li>\n          ))}\n        </ul>\n\n        <Button\n          className={cn(\n            \"w-full\",\n            isCurrentPlan \n              ? \"bg-gray-500 cursor-not-allowed\" \n              : isPopular \n              ? \"bg-blue-600 hover:bg-blue-700\" \n              : isEnterprise\n              ? \"bg-purple-600 hover:bg-purple-700\"\n              : \"bg-gray-900 hover:bg-gray-800\"\n          )}\n          onClick={() => onSelect(plan.id)}\n          disabled={isCurrentPlan || loading}\n        >\n          {isCurrentPlan ? 'Current Plan' : loading ? 'Processing...' : 'Get Started'}\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { Button } from \"./button\"\nimport { cn } from \"../lib/utils\"\n\nexport interface BillingInfoProps {\n  subscription: {\n    id: string\n    status: string\n    current_period_start: string\n    current_period_end: string\n    cancel_at_period_end: boolean\n    plan: {\n      id: string\n      name: string\n      price: number\n      interval: string\n    }\n  }\n  onManageBilling: () => void\n  onUpgrade: () => void\n  onCancel: () => void\n  className?: string\n}\n\nexport function BillingInfo({ \n  subscription, \n  onManageBilling, \n  onUpgrade, \n  onCancel, \n  className \n}: BillingInfoProps) {\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'text-green-600 bg-green-100'\n      case 'trialing':\n        return 'text-blue-600 bg-blue-100'\n      case 'past_due':\n        return 'text-yellow-600 bg-yellow-100'\n      case 'canceled':\n        return 'text-red-600 bg-red-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'Active'\n      case 'trialing':\n        return 'Trial'\n      case 'past_due':\n        return 'Past Due'\n      case 'canceled':\n        return 'Canceled'\n      default:\n        return status.charAt(0).toUpperCase() + status.slice(1)\n    }\n  }\n\n  const formatPrice = (price: number, interval: string) => {\n    if (price === 0) return 'Free'\n    return `$${price}/${interval}`\n  }\n\n  return (\n    <Card className={cn(\"w-full\", className)}>\n      <CardHeader>\n        <CardTitle>Billing Information</CardTitle>\n        <CardDescription>\n          Manage your subscription and billing details\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Current Plan */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"font-medium text-gray-900\">{subscription.plan.name}</h3>\n              <p className=\"text-sm text-gray-500\">\n                {formatPrice(subscription.plan.price, subscription.plan.interval)}\n              </p>\n            </div>\n            <div className={cn(\n              \"px-2 py-1 rounded-full text-xs font-medium\",\n              getStatusColor(subscription.status)\n            )}>\n              {getStatusText(subscription.status)}\n            </div>\n          </div>\n\n          {/* Billing Period */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Current Period</span>\n              <span className=\"font-medium\">\n                {formatDate(subscription.current_period_start)} - {formatDate(subscription.current_period_end)}\n              </span>\n            </div>\n            \n            {subscription.cancel_at_period_end && (\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Cancellation</span>\n                <span className=\"text-red-600 font-medium\">\n                  Ends on {formatDate(subscription.current_period_end)}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <Button\n            onClick={onManageBilling}\n            variant=\"outline\"\n            className=\"flex-1\"\n          >\n            Manage Billing\n          </Button>\n          \n          {subscription.status === 'active' && !subscription.cancel_at_period_end && (\n            <>\n              <Button\n                onClick={onUpgrade}\n                className=\"flex-1\"\n              >\n                Upgrade Plan\n              </Button>\n              <Button\n                onClick={onCancel}\n                variant=\"outline\"\n                className=\"flex-1 text-red-600 hover:text-red-700 hover:bg-red-50\"\n              >\n                Cancel Subscription\n              </Button>\n            </>\n          )}\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"text-xs text-gray-500 space-y-1\">\n          <p>Subscription ID: {subscription.id}</p>\n          <p>\n            {subscription.cancel_at_period_end \n              ? 'Your subscription will end at the current period and you will not be charged again.'\n              : 'You will be charged automatically at the end of each billing period.'\n            }\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { Button } from \"./button\"\nimport { cn } from \"../lib/utils\"\n\nexport interface Invoice {\n  id: string\n  number: string\n  status: 'paid' | 'open' | 'void' | 'uncollectible'\n  amount_paid: number\n  amount_due: number\n  currency: string\n  created: number\n  due_date?: number\n  hosted_invoice_url?: string\n  invoice_pdf?: string\n}\n\nexport interface InvoiceListProps {\n  invoices: Invoice[]\n  onDownload: (invoiceId: string) => void\n  onView: (invoiceId: string) => void\n  loading?: boolean\n  className?: string\n}\n\nexport function InvoiceList({ \n  invoices, \n  onDownload, \n  onView, \n  loading = false, \n  className \n}: InvoiceListProps) {\n  const formatDate = (timestamp: number) => {\n    return new Date(timestamp * 1000).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const formatAmount = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency.toUpperCase(),\n    }).format(amount / 100)\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'text-green-600 bg-green-100'\n      case 'open':\n        return 'text-yellow-600 bg-yellow-100'\n      case 'void':\n        return 'text-gray-600 bg-gray-100'\n      case 'uncollectible':\n        return 'text-red-600 bg-red-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'Paid'\n      case 'open':\n        return 'Open'\n      case 'void':\n        return 'Void'\n      case 'uncollectible':\n        return 'Uncollectible'\n      default:\n        return status.charAt(0).toUpperCase() + status.slice(1)\n    }\n  }\n\n  if (loading) {\n    return (\n      <Card className={cn(\"w-full\", className)}>\n        <CardHeader>\n          <CardTitle>Invoices</CardTitle>\n          <CardDescription>Your billing history</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (invoices.length === 0) {\n    return (\n      <Card className={cn(\"w-full\", className)}>\n        <CardHeader>\n          <CardTitle>Invoices</CardTitle>\n          <CardDescription>Your billing history</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <svg\n              className=\"mx-auto h-12 w-12 text-gray-400\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n              />\n            </svg>\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No invoices yet</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Your invoices will appear here once you have a paid subscription.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={cn(\"w-full\", className)}>\n      <CardHeader>\n        <CardTitle>Invoices</CardTitle>\n        <CardDescription>Your billing history</CardDescription>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {invoices.map((invoice) => (\n            <div\n              key={invoice.id}\n              className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\n            >\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-3\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">\n                      Invoice #{invoice.number}\n                    </p>\n                    <p className=\"text-sm text-gray-500\">\n                      {formatDate(invoice.created)}\n                    </p>\n                  </div>\n                  <div className={cn(\n                    \"px-2 py-1 rounded-full text-xs font-medium\",\n                    getStatusColor(invoice.status)\n                  )}>\n                    {getStatusText(invoice.status)}\n                  </div>\n                </div>\n                <div className=\"mt-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">\n                    {formatAmount(invoice.amount_paid, invoice.currency)}\n                  </p>\n                  {invoice.amount_due > 0 && (\n                    <p className=\"text-xs text-red-600\">\n                      {formatAmount(invoice.amount_due, invoice.currency)} due\n                    </p>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                {invoice.hosted_invoice_url && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onView(invoice.id)}\n                  >\n                    View\n                  </Button>\n                )}\n                {invoice.invoice_pdf && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onDownload(invoice.id)}\n                  >\n                    Download\n                  </Button>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","import * as React from \"react\"\nimport { Button } from \"./button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { cn } from \"../lib/utils\"\n\n// Define the hook interface locally to avoid circular dependency\ninterface UseFeatureGateReturn {\n  isAllowed: boolean\n  needsUpgrade: boolean\n  reason?: string\n  currentUsage?: number\n  limit?: number\n}\n\n// Mock implementation - in a real app, this would be passed as a prop or context\nfunction useFeatureGate(feature: string): UseFeatureGateReturn {\n  // This is a placeholder - in the real implementation, this would come from a context or prop\n  return {\n    isAllowed: true, // Default to allowed for now\n    needsUpgrade: false,\n  }\n}\n\nexport interface FeatureGateProps {\n  feature: string\n  fallback?: React.ReactNode\n  children: React.ReactNode\n  showUpgrade?: boolean\n  className?: string\n}\n\nexport function FeatureGate({ \n  feature, \n  fallback, \n  children, \n  showUpgrade = true,\n  className \n}: FeatureGateProps) {\n  const { isAllowed, needsUpgrade, reason, currentUsage, limit } = useFeatureGate(feature)\n\n  if (isAllowed) {\n    return <>{children}</>\n  }\n\n  if (fallback) {\n    return <>{fallback}</>\n  }\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {/* Blurred content */}\n      <div className=\"blur-sm pointer-events-none select-none\">\n        {children}\n      </div>\n      \n      {/* Overlay */}\n      <div className=\"absolute inset-0 flex items-center justify-center bg-white/80 backdrop-blur-sm\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-lg\">Feature Not Available</CardTitle>\n            <CardDescription>\n              {reason || 'This feature is not available in your current plan'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {currentUsage !== undefined && limit !== undefined && (\n              <div className=\"text-center\">\n                <div className=\"text-sm text-gray-600 mb-2\">\n                  Usage: {currentUsage} / {limit === -1 ? '∞' : limit}\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div\n                    className=\"bg-red-500 h-2 rounded-full\"\n                    style={{ width: `${Math.min((currentUsage / limit) * 100, 100)}%` }}\n                  />\n                </div>\n              </div>\n            )}\n            \n            {showUpgrade && (\n              <Button \n                className=\"w-full\"\n                onClick={() => {\n                  // This would typically navigate to the billing page\n                  window.location.href = '/dashboard/billing'\n                }}\n              >\n                Upgrade Plan\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport interface FeatureBadgeProps {\n  feature: string\n  className?: string\n}\n\nexport function FeatureBadge({ feature, className }: FeatureBadgeProps) {\n  const { isAllowed, needsUpgrade, reason } = useFeatureGate(feature)\n\n  if (isAllowed) {\n    return (\n      <span className={cn(\n        \"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\",\n        className\n      )}>\n        <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n        </svg>\n        Available\n      </span>\n    )\n  }\n\n  if (needsUpgrade) {\n    return (\n      <span className={cn(\n        \"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\",\n        className\n      )}>\n        <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n        </svg>\n        Upgrade Required\n      </span>\n    )\n  }\n\n  return (\n    <span className={cn(\n      \"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800\",\n      className\n    )}>\n      <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n        <path fillRule=\"evenodd\" d=\"M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z\" clipRule=\"evenodd\" />\n      </svg>\n      Not Available\n    </span>\n  )\n}\n\nexport interface FeatureTooltipProps {\n  feature: string\n  children: React.ReactNode\n  className?: string\n}\n\nexport function FeatureTooltip({ feature, children, className }: FeatureTooltipProps) {\n  const { isAllowed, reason } = useFeatureGate(feature)\n\n  if (isAllowed) {\n    return <>{children}</>\n  }\n\n  return (\n    <div className={cn(\"relative group\", className)}>\n      {children}\n      <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10\">\n        {reason || 'Feature not available in your current plan'}\n        <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900\" />\n      </div>\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./card\"\nimport { Button } from \"./button\"\nimport { FeatureBadge } from \"./feature-gate\"\nimport { cn } from \"../lib/utils\"\n\nexport interface EntitlementCardProps {\n  title: string\n  description: string\n  features: Array<{\n    name: string\n    feature: string\n    description?: string\n  }>\n  onUpgrade?: () => void\n  className?: string\n}\n\nexport function EntitlementCard({ \n  title, \n  description, \n  features, \n  onUpgrade,\n  className \n}: EntitlementCardProps) {\n  return (\n    <Card className={cn(\"w-full\", className)}>\n      <CardHeader>\n        <CardTitle className=\"text-xl\">{title}</CardTitle>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-3\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-2\">\n                  <h4 className=\"font-medium text-gray-900\">{feature.name}</h4>\n                  <FeatureBadge feature={feature.feature} />\n                </div>\n                {feature.description && (\n                  <p className=\"text-sm text-gray-600 mt-1\">{feature.description}</p>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {onUpgrade && (\n          <div className=\"pt-4 border-t\">\n            <Button \n              onClick={onUpgrade}\n              className=\"w-full\"\n            >\n              Upgrade Plan\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport interface FeatureComparisonProps {\n  features: Array<{\n    name: string\n    feature: string\n    description?: string\n  }>\n  onUpgrade?: () => void\n  className?: string\n}\n\nexport function FeatureComparison({ \n  features, \n  onUpgrade,\n  className \n}: FeatureComparisonProps) {\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Feature Access</h3>\n        <p className=\"text-sm text-gray-600\">\n          Check which features are available in your current plan\n        </p>\n      </div>\n      \n      <div className=\"grid gap-4\">\n        {features.map((feature, index) => (\n          <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n            <div className=\"flex-1\">\n              <h4 className=\"font-medium text-gray-900\">{feature.name}</h4>\n              {feature.description && (\n                <p className=\"text-sm text-gray-600 mt-1\">{feature.description}</p>\n              )}\n            </div>\n            <FeatureBadge feature={feature.feature} />\n          </div>\n        ))}\n      </div>\n      \n      {onUpgrade && (\n        <div className=\"text-center pt-4\">\n          <Button onClick={onUpgrade}>\n            Upgrade to Access More Features\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n"],"mappings":"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","names":["React","jsx","React","jsx","React","cva","jsx","cva","React","jsx","React","cva","jsx","cva","React","jsx","jsx","error","Fragment","jsx","jsxs","useState","Fragment","jsx","jsxs","useState","jsx","jsxs","useState","jsx","jsxs","useState","error","useState","jsx","jsxs","useState","error","jsx","jsxs","jsx","jsxs","jsx","jsxs","jsx","jsxs","Fragment","jsx","jsxs","jsx","jsxs","jsx","jsxs","Fragment","jsx","jsxs","jsx","jsxs","Fragment","jsx","jsxs","jsx","jsxs"]}